#!/bin/bash

# Package manager for BirbOS
# Binaries are installed to ~/.local/birb/packages and source files to ~/.local/birb/files. To keep account of installed packages, files are created for each of them to ~/.local/birb/database
installPath="$HOME/.local/birb/packages"
filePath="/tmp/birb"
databasePath="$HOME/.local/birb/database"
debianRepo="$HOME/.local/birb/debian_repo"

# Create main directories
[ -d $installPath ] 	|| mkdir -pv $installPath
[ -d $filePath ] 		|| mkdir -pv $filePath
[ -d $databasePath ] 	|| mkdir -pv $databasePath

# cmake install prefix command: "cmake -DCMAKE_INSTALL_PREFIX=/usr .."

# Functions
_Help()
{
	echo "Birb Package manager"
	echo "Usage: birb [options]"
	echo ""
	echo -e "\e[1mOptions:\e[0m"
	echo -e "\t-S <package>\tInstalls selected package to /usr/"
	echo -e "\t-Sd <deb file>\tInstalls selected debian package to /usr/"
	echo -e "\t-R <package>\tRemoves selected package"
	echo -e "\t-L \t\tLists all packages"
	echo -e "\t-Lf \t\tLists all packages in fzf"
	echo -e "\t-I <package>\tGet information about the selected package"

	echo -e "\n\e[1mDebian repositories:\e[0m"
	echo -e "\t-Sy \t\tUpdates debian repository database"
	echo -e "\t-Qd \t\tQuery debian repository database"
	echo -e "\t-Qdd \t\tQuery debian repository database and also fetch download links online"

	echo -e "\n\e[1mAuto compiling:\e[0m"
	echo -e "\tinstall \tTries to configure, make and install the package from source."
	echo -e "\t\t\tYou have to be in the source directory while running this command!"
}

_InstallPackage()
{
	echo -e "Installing package \e[31m$package\e[0m..."
	target=$installPath/$package

	if [ ! -d $target ]
	then
		echo "Package '$package' not found in $target"
		exit 1
	fi

	sudo /usr/local/bin/stow -S --verbose=1 -t "/usr" -d $installPath $package && echo "Installation successful!" || echo "Something went wrong..."
}

_OverwritePackage()
{
	echo -n "This package already exists. Overwrite it? [y/n]: "
	read answer

	case $answer in
		y|Y) ans=y ;;
		n|N) ans=n ;;
	esac

	if [[ "$ans" == "y" ]]
	then
		echo "Overwriting the package $packageName"	
		rm -r $target
	else
		exit 0
	fi
}

_ExtractDebPackage()
{
	packageName=$(echo $package | cut -d'_' -f1 | xargs basename)
	echo " > Package name: $packageName"

	target=$installPath/$packageName
	[ -d $target ] && _OverwritePackage

	# Create new directory for extracted files
	extractTarget=$filePath/$packageName
	mkdir $extractTarget > /dev/null
	cd $extractTarget

	# Extract deb package
	echo " > Extracting files..."
	ar -x $package

	# Extract tarballs
	tar -xf control.tar.xz
	tar -xf data.tar.xz


	# Check md5sums
	md5sum -c ./md5sums > /dev/null && echo " > MD5 Checksums completed without problems!" || " > Some of the files seem to be corrupted!"

	# Move files to the birb installation dir to be installed as package
	mkdir -v $target
	mv -v ./usr/* $target/


	# Oneliner to get deps in list
	# cat control | awk '/^Depends/' | tr , '\n' | sed 's/Depends://g; s/^ //g'

	# Deps without versions
	# cat control | awk '/^Depends/' | tr , '\n' | sed 's/Depends://g; s/^ //g; s/ .*//g'

	echo " > Reading control file"
	deps=$(cat control | awk '/^Depends/' | sed 's/Depends: //g; s/, /;/g')
	recommended=$(cat control | awk '/^Recommends/' | sed 's/Recommends: //g; s/, /;/g')
	version=$(cat control | awk '/^Version/ {print $2}')
	
	echo " > Adding package to database"
	databaseTarget=$databasePath/$packageName
	touch $databaseTarget

	echo "Name:$packageName" 		> $databaseTarget
	echo "Version:$version"  		>> $databaseTarget
	echo "Deps:$deps" 		 		>> $databaseTarget
	echo "Recommended:$recommended" >> $databaseTarget

	# Clean up
	echo " > Cleaning up..."
	rm ./control.tar.xz ./data.tar.xz
	rm -r ./usr ./md5sums ./debian-binary
	rm -r $extractTarget
}

_RemovePackage()
{
	echo "Removing package $package..."

	local target=$installPath/$package

	if [ ! -d $target ]
	then
		echo "Package '$package' not found in $target"
		exit 1
	fi

	sudo /usr/local/bin/stow -D --verbose=1 -t "/usr" -d $installPath $package && echo "Package removed successfully!" || echo "Something went wrong..."
}


_ListPackages()
{
	[ "$fuzzyList" == "false" ] && ls -1 $installPath || ls -1 $installPath | fzf --preview="[ -f $databasePath/{} ] && cat $databasePath/{}"
}

_GetPackageInfo()
{
	stow -R --simulate -t /usr "$package" &> /dev/null
	local installStatus=$?
	local packageSize=$(du -sh $installPath/$package | awk '{print $1}')

	echo -e "Package name: \t\t${package}"
	echo -e "Install status: \t$([ $installStatus -eq 0 ] && echo "Installed" || echo "Not installed")"
	echo -e "Size: \t\t\t${packageSize}"
}


_ConfigureSource()
{
	local pkgName=$(basename $(pwd))
	echo -e "Configuring with package name '\e[31m$pkgName\e[0m'"
	echo -e "Target prefix: [$installPath/$pkgName]"
	echo -n "Continue? (y/N): "
	read answer

	case $answer in
		y|Y) 
			[ -f ./configure.ac ] && autoreconf -i
			[ -f ./configure ] || echo "'configure' file not found in the current directory." || exit 0
			./configure --prefix=$installPath/$pkgName && make -j6 && make install
			;;
		*) 
			echo "Cancelled"
			exit 0
			;;
	esac
}

_NoDebianRepoFound()
{
	echo "Debian repository database not found in [$debianRepo]"
	echo "Please download/update it with the following command:"
	echo -e "$ birb -Sy"
	exit 1
}

_GetDebianSourceLinks()
{
	local url="$2"
	downloads=$(curl -s $url | awk '/.tar.[gx]z/' | sed '/tar\.gz\.asc/d; s/^.*a href="//g; s/">.*//g')
	downloads=$(sed "s|^|$url|g" <<< $downloads)

	echo -e "## Downloads ##\n$downloads"
}

_QueryDebianDB()
{
	local query=$1
	[ -f $debianRepo ] || _NoDebianRepoFound
	echo "Searching for [$query]..."
	pkgQuery=$(grep "Package: $query" $debianRepo)
	if [[ $? -ne 0 ]]
	then
		echo "No results. Package [$query] might no exist in debian repositories"
		exit 1
	fi

	pkgName=$(sed 's/Package: //g' <<< $pkgQuery | fzf --height=20% -1)
	if [[ $? -ne 0 ]]
	then
		# Result not found or cancelled
		exit 0
	fi

	result=$(sed -n "/^Package: $pkgName/,\${p;/^Section:/q}" $debianRepo)

	if [[ "$queryDL" == "true" ]]
	then
		downloadURL="http://ftp.debian.org/debian/$(awk '/Directory/ {print $2}' <<< $result)/"
		echo -e "$result\n"
		_GetDebianSourceLinks "$pkgName" "$downloadURL"
	else
		echo -e "$result\n"
	fi

}
# End of functions



# Handle argument flags
while test $# -gt 0; do
	case $1 in
		-h | --h | -help | --help)
			_Help
			exit 0
			;;
	
		-S)
			shift
			if [ $# -gt 0 ]
			then
				package=$1
				_InstallPackage
			else
				echo "No package specified"
				exit 1
			fi
			shift
			;;

		-Sd)
			shift
			if [ $# -gt 0 ]
			then
				package=$1
				_ExtractDebPackage
			else
				echo "No package specified"
				exit 1
			fi
			shift
			;;

		-R)
			shift
			if [ $# -gt 0 ]
			then
				package=$1
				_RemovePackage
			else
				echo "No package specified"
				exit 1
			fi
			shift
			;;

		-L)
			shift
			fuzzyList=false
			_ListPackages
			exit 0
			;;

		-Lf)
			shift
			[ -n $(which fzf) ] || echo "fzf not installed!" || exit 1
			fuzzyList=true
			_ListPackages
			exit 0
			;;

		-I)
			shift
			# Get package info
			if [ $# -gt 0 ]
			then
				package=$1
				_GetPackageInfo
			else
				echo "No package specified"
				exit 1
			fi
			exit 0
			;;

		-Sy)
			shift
			echo "Updating debian repository..."
			rm -v $debianRepo
			wget "http://ftp.uk.debian.org/debian/dists/bullseye/main/source/Sources.gz" -O ${debianRepo}.gz
			echo "Unzipping ${debianRepo}.gz"
			gunzip ${debianRepo}.gz
			;;

		-Qd)
			shift
			# Query debian repository database
			if [ $# -gt 0 ]
			then
				_QueryDebianDB "$1"
				shift
			else
				echo "No package specified"
				exit 1
			fi
			;;

		-Qdd)
			shift
			# Query debian repository database
			# and also fetch download links from debian
			# ftp server
			if [ $# -gt 0 ]
			then
				queryDL=true
				_QueryDebianDB "$1"
				shift
			else
				echo "No package specified"
				exit 1
			fi
			;;

		install)
				shift
				# Configure package in the working directory
				_ConfigureSource
				exit 0
			;;

		*)
			echo "Unknown option $1. --help for help :)"
			exit 1
			;;
	esac
done
