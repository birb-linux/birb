#!/bin/bash

# URL where birb gets its source code from
BIRB_REMOTE="https://github.com/birb-linux/birb"

# Check if the LFS variable is set
# If it isn't empty, it means that we are installing
# BirbOS and the LFS variable should be used as the
# installation prefix, so that all of the files end
# up into the correct directory
INSTALL_PREFIX="$LFS"

REPO_DIR="$INSTALL_PREFIX/var/db/pkg"
DB_DIR="/var/lib/birb"
NEST="$DB_DIR/nest"
PACKAGE_LIST="$DB_DIR/packages"
BUILD_DIR_PATH="/var/tmp/birb"
FAKEROOT_BACKUP_PATH="/var/backup/birb/fakeroot_backups"
export DISTFILES="$INSTALL_PREFIX/var/cache/distfiles"
export FAKEROOT="$INSTALL_PREFIX/var/db/fakeroot"
export PYTHON_DIST="usr/python_dist"
export PATH="/usr/local/bin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/python_bin:/opt/rustc/bin"
export ACLOCAL_PATH=/usr/share/aclocal

# Location where birb source code is cloned to
BIRB_DIST="$DISTFILES/birb"

# Source misc. functions from /usr/lib/birb/birb_funcs
# shellcheck source=/usr/lib/birb/birb_funcs
source "$INSTALL_PREFIX/usr/lib/birb/birb_funcs"


set_win_title()
{
	# Change the title if X is running
	# This requires pgrep to be installed
	if [ -f /usr/bin/pgrep ]
	then
		if [ -n "$(pgrep X)" ]
		then
			echo -en "\033kbirb: $1\033\\"
		fi
	fi
}


# Make sure that the configuration files are in place
BIRB_CFG_PATH="$INSTALL_PREFIX/etc/birb.conf"
BIRB_REPO_LIST_PATH="$INSTALL_PREFIX/etc/birb-sources.conf"

[ ! -f "$BIRB_CFG_PATH" ] && println WARNING "$BIRB_CFG_PATH is missing, please reinstall birb with 'birb --upgrade'"
[ ! -f "$BIRB_REPO_LIST_PATH" ] && println ERROR "$BIRB_REPO_LIST_PATH is missing. Check TROUBLESHOOTING section in 'man birb' for instructions on how to fix this issue" && exit 1

# Set default values for configuration variables in-case
# the configuration doesn't exist
[ -z "$ENABLE_LTO" ] && ENABLE_LTO=yes
[ -z "$BUILD_JOBS" ] && BUILD_JOBS="$(nproc)"
[ -z "$ENABLE_32BIT_PACKAGES" ] && ENABLE_32BIT_PACKAGES=yes

# Load the configuration file (if it exists)
if [ -f "$BIRB_CFG_PATH" ]
then
	# shellcheck source=/etc/birb.conf
	source "$BIRB_CFG_PATH"
fi



print_help()
{
	echo "Usage: birb [OPTIONS...] [ARGUMENTS...] [PACKAGE(s)...]"
	echo ""
	echo "      --help                         display this help page and exit"
	echo "      --download PACKAGE(s)          download the source tarball for the given package"
	echo "  -i  --install [options] PACKAGE(s) install given package(s) to the filesystem"
	echo "  -u  --uninstall PACKAGE(s)         uninstall given package(s) from the filesystem"
	echo "      --depclean                     find and uninstall orphan packages"
	echo "      --relink PACKAGE(s)            re-create symlinks to the package fakeroots"
	echo "  -s  --search                       search for packages by name"
	echo "  -b  --browse                       browse packages and their descriptions with fzf"
	echo "      --source [option]              change or query the repository source"
	echo "      --sync [--force]               sync package repositories"
	echo "      --list-installed               list all currently installed packages"
	echo "      --update                       update out-of-date packages"
	echo "      --upgrade [--debug|--test]     update the birb package manager"
	echo ""
	echo "If a valid package names are given as the only arguments, birb will attempt"
	echo "downloading and installing them"
	echo ""
	echo "For more information (and to fill in the [option] gaps), please read the manual"
	echo "with the 'man birb' command"
}

if [ -z "$1" ]
then
	print_help
	exit 0
fi

# Args: [file path] [checksum]
# Return values:
# 0 = Checksums match
# 1 = Checksums didn't match
checksum_check()
{
	FILE_PATH="$1"
	GOAL_CHECKSUM="$2"

	FILE_CHECKSUM="$(md5sum "$FILE_PATH" | cut -d' ' -f1)"

	# Make sure that either of the checksums aren't empty
	[ -z "$GOAL_CHECKSUM" ] && echo "1"
	[ -z "$FILE_CHECKSUM" ] && echo "1"

	[ "$GOAL_CHECKSUM" == "$FILE_CHECKSUM" ] && echo "0" || echo "1"
}

root_check()
{
	if [ "$(whoami)" != "root" ]
	then
		println ERROR "This command needs to be run with root privileges (￢_￢;)"
		exit 1
	fi
}

# Check if the kernel has certain settings enabled
kernel_check()
{
	# There might be some errors, we can ignore them
	set +e
	REQUIRED_FLAGS="$1"

	println "Checking kernel configuration"
	KERNEL_CONFIG_PATH="/usr/src/linux/.config"
	[ ! -f "$KERNEL_CONFIG_PATH" ] && println ERROR "Can't find the kernel config! ($KERNEL_CONFIG_PATH)" && exit 1

	CONFIG_ERROR=""
	for i in $REQUIRED_FLAGS
	do
		if ! grep -q "^${i}=[ym]" $KERNEL_CONFIG_PATH
		then
			if [ -z "$CONFIG_ERROR" ]
			then
				echo "Missing required kernel options: "
			fi
			CONFIG_ERROR="yes"

			echo "$i"
		fi
	done
	set -e

	[ -n "$CONFIG_ERROR" ] && return 1
	return 0
}

# Make sure that we are in a TTY with no Xorg running
# Quit with error code 1 if Xorg process is found to be running
#
# This function is supposed to be using in package install scripts
tty_check()
{
	if [ -n "$(pgrep -x Xorg)" ]
	then
		echo "This package can only be installed in the TTY. Please close Xorg before proceeding"
		exit 1
	fi
}

source_pkg_seed()
{
	# Make sure that the seed file exists
	[ ! -f "$REPO_DIR/$1/seed.sh" ] && echo "Invalid seed file: $1" && exit 1

	# shellcheck source=/var/db/pkg/vim/seed.sh
	source "$REPO_DIR/$1/seed.sh"
}

# Figure out what repository to use with birb_db
# This function should be always called when a package is
# downloaded or installed
#
# The function takes the package name as an argument
update_repo_path()
{
	if [ -f "$BIRB_REPO_LIST_PATH" ] && [ -z "$INSTALL_PREFIX" ]
	then
		PACKAGE_NAME="$1"
		REPO_DIR="$(birb_db --locate-package "$PACKAGE_NAME")"
	else
		REPO_DIR="$INSTALL_PREFIX/var/db/pkg"
	fi
}

# Delete packages that were installed as dependencies but
# their went missing. These packages are usually waste of space
remove_orphan_dependencies()
{
	println "Looking for orphan packages..."

	ORPHAN_TMP_FILE="$(mktemp /tmp/XXXXXX)"
	birb_dep_solver -o 2> "$ORPHAN_TMP_FILE"

	# Read in the orphan list
	ORPHAN_PACKAGES=$(<"$ORPHAN_TMP_FILE")

	# Remove the temporary file
	rm "$ORPHAN_TMP_FILE"

	if [ -z "$ORPHAN_PACKAGES" ]
	then
		echo "No orphan packages were found"
		exit 0
	else
		echo -e "$ORPHAN_PACKAGES\n"
	fi

	read -rp "Would you like to remove them? (y/N): " AGREE_UNINSTALL_WARNED
	case $AGREE_UNINSTALL_WARNED in
		y|Y|yes|Yes) ;;
		*)
			echo "Cancelled"
			exit 1
			;;
	esac

	root_check

	cd "$FAKEROOT"
	# shellcheck disable=SC2086
	RECLAIMED_SPACE="$(du -shc $ORPHAN_PACKAGES)"

	# Uninstall packages while not caring about reverse dependencies (should be safe)
	# shellcheck disable=SC2086
	{ YOLO=true birb --uninstall $ORPHAN_PACKAGES && echo -e "Orphan removal finished!\nReclaimed storage:\n$RECLAIMED_SPACE"; } || println ERROR "Something went wrong during orphan removal..."
}

# A wrapper around wget with some error checking and output formatting
# All files are downloaded to /var/cache/distfiles
#
# Args: [url]
fetch_file()
{
	# Check if wget is installed
	[ ! -f /usr/bin/wget ] && println ERROR "wget isn't installed! Birb cannot download anything without it (╯°□°)╯︵ ┻━┻" && exit 1

	wget -q --show-progress --directory-prefix="$DISTFILES" "$1" || { println ERROR "Couldn't dowload $1"; exit 1; }
}

# This function is internal and should only be used by the
# download_src() function
download_src_checksum_check()
{
	unset SKIP_DOWNLOAD

	if [ -f "$DISTFILES/$TARBALL" ]
	then
		echo "Found [$TARBALL] in distcache"
		if [ "$(checksum_check "$DISTFILES/$TARBALL" "$CHECKSUM")" == "0" ]
		then
			# The tarball has already been downloaded and the download can
			# be skipped without any issues
			SKIP_DOWNLOAD=true
			return 0
		else
			echo "[$TARBALL] checksum doesn't match the package checksum! The package needs to be re-downloaded"
			rm -v "$DISTFILES/$TARBALL"
			return 1
		fi
	fi
}

# Download a tarball for the given package using wget
# The tarball will be stored to /var/cache/distfiles
download_src()
{
	update_repo_path "$1"
	PKG_PATH="$REPO_DIR/$1"

	# Check if a package with this name is in the repositories
	if [ ! -d "$PKG_PATH" ]
	then
		println ERROR "There's no package with the name [$1]"
		exit 1
	fi

	# Source the package variables
	source_pkg_seed "$1"

	# Make sure that the package has a checksum
	[ -z "$CHECKSUM" ] && println ERROR "Package [$NAME] doesn't define a checksum! The package won't be downloaded." && return 1

	# Get the tarball name from the download URL
	TARBALL="$(basename $SOURCE)"

	println "Fetching $TARBALL..."

	# Check if the package tarball has already been downloaded
	# and the checksum matches
	download_src_checksum_check
	[ -n "$SKIP_DOWNLOAD" ] && return 0

	# Try looking for source tarballs with birbd if its installed
	# This also requires rsync to be installed
	if [ -f /usr/bin/birbd ] && [ -f /etc/birbd.conf ] && [ -f /usr/bin/rsync ]
	then
		# Read the birbd configuration file and check if it has
		# any valid IP-addresses
		BIRBD_ADDRESSES="$(sed 's/#.*//g; /^[[:space:]]*$/d' /etc/birbd.conf | grep -o "[0-9]*\.[0-9]*\.[0-9]\.[0-9]*")"

		if [ -n "$BIRBD_ADDRESSES" ]
		then
			println "Checking birbd servers for tarballs..."
			for i in $BIRBD_ADDRESSES
			do
				# Attempt pinging the birbd server
				if timeout 0.2 ping -c 1 "$i" &>/dev/null
				then
					BIRBD_SERVER_ADDRESS="$i"

					# The machine responded, check if it has the tarball
					BIRBD_RESPONSE="$(birbd "$BIRBD_SERVER_ADDRESS" "has_package;$TARBALL;$CHECKSUM")"

					if [ "$BIRBD_RESPONSE" == "positive" ]
					then
						echo "$BIRBD_SERVER_ADDRESS has the tarball! Downloading it with rsync..."
						rsync -a --progress "birbd@$BIRBD_SERVER_ADDRESS:/var/cache/distfiles/$TARBALL" /var/cache/distfiles/
					fi
				fi
			done
		fi
	fi

	# Make sure that the tarball we have is the correct one (in case we got it from a birbd server)
	download_src_checksum_check
	[ -n "$SKIP_DOWNLOAD" ] && return 0

	for i in {1..3}
	do
		# Download the source tarball
		fetch_file $SOURCE

		# Check the MD5 checksum
		if [ "$(checksum_check "$DISTFILES/$TARBALL" "$CHECKSUM")" == "1" ]
		then
			println WARNING "There was a checksum mismatch. The downloaded archive will be removed to prevent installing a possibly corrupt package. Please re-try downloading it"
			md5sum "$DISTFILES/$TARBALL"
			rm -v "$DISTFILES/$TARBALL"
		else
			return 0
		fi
	done
}

# Allows for easy download of additional files during package setup
# Args: url:md5
#
# For example:
# download_additional example.com:5ababd603b22780302dd8d83498e5172 hello.world:18aa7764566d19e9a9afb6ea0bf1fa81
download_additional()
{
	println "Fetching additional files"

	while test $# -gt 0
	do
		ADDITIONAL_URL="$(echo "$1" | cut -d':' -f1)"
		ADDITIONAL_CHECKSUM="$(echo "$1" | cut -d':' -f2)"
		shift

		ADDITIONAL_FILE="$(basename "$ADDITIONAL_URL")"

		# Check if the file is already downloaded
		[ -f "$DISTFILES/$ADDITIONAL_FILE" ] && continue

		for i in {1..3}
		do
			# Download the file
			fetch_file "$ADDITIONAL_URL"

			# Verify the checksum
			if [ "$(checksum_check "$DISTFILES/$ADDITIONAL_FILE" "$ADDITIONAL_CHECKSUM")" == "1" ]
			then
				pritnln WARNING "Checksum mismatch! Re-downloading $ADDITIONAL_FILE..."
				rm -v "$DISTFILES/$ADDITIONAL_FILE"
			else
				# Download was successful, break the download loop
				break
			fi
		done
	done
}

# Create some basic directories for the fakeroot
# in case the package isn't going to create those directories
# and gets confused
prepare_fakeroot()
{
	mkdir -p "$1"/{usr/{lib/bfd-plugins,lib32,share/{doc,man/man{1..8}},bin,sbin,include},etc,sbin}
	mkdir -p "$1"/usr/share/fonts/{TTF,OTF}
	mkdir -p "$1"/usr/share/applications
	mkdir -p "$1"/etc/X11/app-defaults
}

# Returns whether the use flag is enabled
# This is useful for customizing how programs get compiled and can be used
# to minimize dependencies
has_use()
{
	# Check if a useflag is set by using grep
	HAS_FLAG="$(echo "$USE_FLAGS" | grep -wo "$1")"
	return "$([ -n "$HAS_FLAG" ])"
}

# If the use flag has been set in the config file, expand it into some command
# This is useful for customizing how programs get compiled and can be used
# to minimize dependencies
expand_use()
{
	PKG_FLAG="$1"
	OUTPUT="$2"
	DISABLED_OUTPUT="$3"

	# If the flag had been specified, expand it into the OUTPUT
	# text
	if has_use "$PKG_FLAG"
	then
		echo "$OUTPUT"
	else
		echo "$DISABLED_OUTPUT"
	fi
}


# Print out a custom warning if some specific package flag is specified
# The FLAGS variable needs to be already sourced when calling this function
flag_warning()
{
	FLAG="$1"
	WARNING="$2"

	if echo "$FLAGS" | grep -wq "$FLAG"
	then
		println WARNING "$WARNING"
		read -rp "Are you sure you want to install it? (y/N): " AGREE_INSTALL_WARNED
		case $AGREE_INSTALL_WARNED in
			y|Y|yes|Yes) ;;
			*)
				echo "Cancelled"
				exit 1
				;;
		esac
	fi
}

# Disables LTO for the package build
# Call this if the package refuses to build with LTO enabled
disable_lto()
{
	export CFLAGS="$CFLAGS -fno-lto"
	export CXXFLAGS="$CXXFLAGS -fno-lto"
}

invalid_package_name_error()
{
	echo "Invalid package name: [$1]"
	echo "Quitting..."
	exit 1
}

# Make sure that the package name doesn't include characters
# like '/' and '.', because they can cause a lot of trouble
validate_package_name()
{
	echo "$1" | grep -wq '^[0-9a-z_+-]*$' || invalid_package_name_error "$1"
}

# Add a package to nest if it was installed by the user
# Args: [package_name]
add_package_to_nest()
{
	if ! grep -qx "$1" $NEST && [ -z "$IS_DEPENDENCY_PACKAGE" ]
	then
		echo "$1" >> $NEST
	fi
}

install_package()
{
	root_check
	PACKAGE_NAME="$1"
	validate_package_name "$PACKAGE_NAME"
	update_repo_path "$PACKAGE_NAME"
	export PKG_PATH="$REPO_DIR/$PACKAGE_NAME"

	# Check if a package with this name is in the repositories
	if [ ! -d "$PKG_PATH" ]
	then
		println ERROR "There's no package with the name [$PACKAGE_NAME]"
		exit 1
	fi

	# Check if the package is already installed
	if [ "$(birb_db --is-installed "$PACKAGE_NAME")" == "yes" ]
	then
		# Skip this package is SKIP_INSTALLED_PACKAGES has been set
		if [ -n "$SKIP_INSTALLED_PACKAGES" ]
		then
			return 0;
		fi

		echo "$PACKAGE_NAME is already installed"
		read -rp "Force a reinstall? [y/N]: " AGREE_FORCE_REINSTALL
		case $AGREE_FORCE_REINSTALL in
			y|Y|yes|Yes)
				FORCE_REINSTALL="yes"
				;;

			*)
				echo "Cancelled"
				return 1;
				;;
		esac
	else
		# TODO: This portion is a bit dangerous, since reinstalling an important
		# mission critical package would render the system unusable

		# If the package isn't already installed, but a fakeroot for it exists,
		# delete the fakeroot to avoid any dangling / corrupt files
		[ -d "$FAKEROOT/$PACKAGE_NAME" ] && println "Deleting an existing fakeroot" && rm -r "${FAKEROOT:?}/$PACKAGE_NAME"
	fi

	# Reset all package variables in-case some package has omitted
	# a variable or two
	unset NAME DESC VERSION SOURCE CHECKSUM DEPS FLAGS NOTES
	unset _post_install

	# Source the package variables and functions
	source_pkg_seed "$PACKAGE_NAME"

	# Check if the package is still "work in progress"
	flag_warning "wip" "This package is still considered 'work in progress' and may not be fully functional!"

	# Check if the package is marked as proprietary
	flag_warning "proprietary" "This package contains binary blobs! Source code may or may not be available. Proceed with caution."

	# Export env variables used for installing Xorg related packages
	export XORG_PREFIX="$FAKEROOT/$NAME/usr"
	export XORG_CONFIG="--prefix=$XORG_PREFIX --sysconfdir=/etc \
		--localstatedir=/var --disable-static"

	# Check if the dependency requirements are met
	println "Checking dependencies"
	RECURSIVE_DEPENDENCIES="$(birb_dep_solver $NAME)"
	if [ $? -eq 2 ]
	then
		println ERROR "Something wen't wrong with dependency resolution..."
		echo "Dependency solver output: $RECURSIVE_DEPENDENCIES"
		exit 2
	fi
	HAD_MISSING_DEP=""
	for i in $RECURSIVE_DEPENDENCIES
	do
		# Check if the dependency is installed
		if [ "$(birb_db --is-installed "$i")" == "no" ] #|| [ ! -d "$FAKEROOT/$i" ]
		then
			HAD_MISSING_DEP="yes"
			DEPS_TO_INSTALL="$DEPS_TO_INSTALL $i"
			echo "[ ] $i"
			continue
		else
			echo -e "[✓] $i"
		fi
	done

	if [ "$HAD_MISSING_DEP" == "yes" ]
	then
		echo "Missing dependencies were found. Would you like to attempt installing them?"
		read -rp "[Y/n]: " AGREE_INSTALL_DEPS
		case $AGREE_INSTALL_DEPS in
			n|N|n*|N*)
				echo "Cancelled"
				exit 1
				;;

			""|y|Y|y*|Y*) ;;

			*)
				echo "Cancelled"
				exit 1
				;;
		esac

		println "Attempting to install the following packages: [$DEPS_TO_INSTALL]"
		# shellcheck disable=SC2086
		IS_DEPENDENCY_PACKAGE="true" birb $DEPS_TO_INSTALL || { echo "Something went wrong while trying to install dependencies. Cancelling the mission..."; exit 1; }
	fi

	# Attempt to download the package
	set_win_title "Installing $PACKAGE_NAME (download)"
	download_src "$PACKAGE_NAME"
	[ $? -eq 1 ] && echo "Error during downloading [$PACKAGE_NAME]. Aborting the mission..." && exit 1


	# Make sure that the package has set all of the required variables
	[ -z "$NAME" ] 		&& echo "Encountered a package with a missing name! Aborting the mission..." && exit 1
	[ -z "$SOURCE" ] 	&& echo "Encountered a package without a tarball source! Aborting the mission..." && exit 1
	[ -z "$CHECKSUM" ] 	&& echo "Encountered a package without a checksum! Aborting the mission..." && exit 1

	# Check if the package wants to also build 32bit libraries
	ENABLE_32BIT="$(echo "$FLAGS" | grep -o "32bit")"

	# Check if there are tests in the package
	PACKAGE_HAS_TESTS="$(echo "$FLAGS" | grep -o "test")"
	PACKAGE_HAS_32BIT_TESTS="$(echo "$FLAGS" | grep -o "test32")"

	# Check if the package is a font
	PACKAGE_IS_FONT="$(echo "$FLAGS" | grep -o "font")"

	# If the package is a font, make sure that fontconfig is installed
	if [ -n "$PACKAGE_IS_FONT" ] && [ "$(birb_db --is-installed fontconfig)" == "no" ]
	then
		println ERROR "The 'fontconfig' package is required for font installation. Please install it first before installing this package"
		exit 1
	fi

	set -e

	# Extract the package sources and do any required setup
	export GOPATH="/usr/share/go"
	export PYTHON_PREFIX="$FAKEROOT/$NAME/$PYTHON_DIST"
	export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib32/pkgconfig"
	export TEMPORARY_BUILD_DIR="$BUILD_DIR_PATH/birb_package_build-$NAME"
	rm -rf $TEMPORARY_BUILD_DIR
	mkdir -p $TEMPORARY_BUILD_DIR
	cd $TEMPORARY_BUILD_DIR
	println "Setting things up for compiling"
	set_win_title "Installing $PACKAGE_NAME (setup)"
	_setup

	# Build the package
	println "Building the package"
	set_win_title "Installing $PACKAGE_NAME (build)"
	CFLAGS="$CUSTOM_CFLAGS" CXXFLAGS="$CUSTOM_CXXFLAGS" _build

	# Run tests if the package has them and the user
	# has enabled test running
	if [ -n "$PACKAGE_HAS_TESTS" ] && [ -n "$ENABLE_TESTS" ]
	then
		println "Running tests"
		set_win_title "Installing $PACKAGE_NAME (testing)"
		_test
	fi

	# Install the package into fakeroot directory
	println "Installing the package"
	set_win_title "Installing $PACKAGE_NAME (install)"
	prepare_fakeroot "$FAKEROOT/$PACKAGE_NAME"
	_install

	if [ -n "$ENABLE_32BIT" ] && [ "$ENABLE_32BIT_PACKAGES" == "yes" ]
	then
		println "Building the package with 32-bit libraries"
		set_win_title "Installing $PACKAGE_NAME (build 32bit)"
		CC="gcc -m32" CXX="g++ -m32" PKG_CONFIG_PATH="/usr/lib32/pkgconfig" LDFLAGS="-L/usr/lib32" _build32

		# Run 32-bit tests if the test32 flag is specified
		if [ -n "$PACKAGE_HAS_32BIT_TESTS" ] && [ -n "$ENABLE_TESTS" ]
		then
			println "Running 32-bit tests"
			set_win_title "Installing $PACKAGE_NAME (test 32bit)"
			_test32
		fi

		println "Installing 32-bit libraries"
		set_win_title "Installing $PACKAGE_NAME (install 32bit)"
		_install32
	fi

	# Clean things up
	println "Cleaning up"
	set_win_title "Installing $PACKAGE_NAME (cleanup)"
	rm -r $TEMPORARY_BUILD_DIR

	# Remove all empty directories from the fakeroot
	find "$FAKEROOT/$PACKAGE_NAME" -type d -empty -delete

	# If removing all of the empty directories got rid of the entire
	# fakeroot, we can assume the following things:
	# A) The package installation did nothing and just printed text on the screen
	# B) The package didn't install anything
	# C) The package "absorbed" itself into the system and didn't have anything to install to the fakeroot
	# D) The package was misconfigured and the files went to the wrong place
	#
	# We'll assume here that this is a C case
	if [ ! -d "$FAKEROOT/$PACKAGE_NAME" ]
	then
		println "Hmh... It looks like the package got absorbed into the system with no fakeroot left"
		echo "Since there's no fakeroot, there's nothing else to install. Also the package cannot be tracked and/or uninstalled, so good luck with that"
		echo "This could be an intended 'feature' and not a bug, but if you are unsure, please report this message to the package maintainer"
		println "Marking the package as 'installed'"
		add_package_to_nest "$PACKAGE_NAME"
		birb_db --update "$PACKAGE_NAME" "$VERSION"
		return 0;
	fi

	# Skip the file deletion part when reinstalling or updating
	if [ "$BIRB_PKG_UPDATE" != "true" ]
	then
		if [ -z "$FORCE_REINSTALL" ]
		then
			# Stow the fakeroot directory to the root directory
			println "Finding and deleting conflicting files"
			HAD_CONFLICTS=""

			cd "$FAKEROOT"
			set +e
			FILES_TO_DELETE="$(stow -S -t / -d "$FAKEROOT" "$PACKAGE_NAME" 2>&1 | grep "existing target is not owned by stow" | awk -F' ' '{print "/" $9}')"
			set -e

			if [ -n "$FILES_TO_DELETE" ]
			then
				HAD_CONFLICTS="true"
				if [ -n "$OVERWRITE_FILES" ]
				then
					# shellcheck disable=SC2086
					rm -f $FILES_TO_DELETE
				else
					println WARNING "This package wants to overwite the following files:"
					echo "$FILES_TO_DELETE"
				fi
			fi

			# Do another round of deletions in case there's some other error
			set +e
			FILES_TO_DELETE="$(stow -S -t / -d "$FAKEROOT" "$PACKAGE_NAME" 2>&1 | grep "existing target is neither a link nor a directory" | awk -F' ' '{print "/" $11}')"
			set -e

			if [ -n "$FILES_TO_DELETE" ]
			then
				HAD_CONFLICTS="true"
				if [ -n "$OVERWRITE_FILES" ]
				then
					# shellcheck disable=SC2086
					rm -f $FILES_TO_DELETE
				else
					println WARNING "This package wants to overwite the following files:"
					echo "$FILES_TO_DELETE"
				fi
			fi

			# Quit if there were any conflicts and overwrite wasn't specified
			if [ -z "$OVERWRITE_FILES" ] && [ -n "$HAD_CONFLICTS" ]
			then
				println ERROR "Cancelling installation due to conflicts"
				exit 1
			fi
		fi
	fi

	# Make sure the package doesn't attempt to install the /usr/share/info/dir file
	# because lots of packages want to write into it and that causes conflicts with stow
	rm -f "$FAKEROOT/$PACKAGE_NAME/usr/share/info/dir"


	# Skip symlinking if updating
	if [ -z "$BIRB_PKG_UPDATE" ]
	then
		if [ -z "$FORCE_REINSTALL" ]
		then
			println "Symlinking the package fakeroot to the system root"
			stow -S -t / -d "$FAKEROOT" "$PACKAGE_NAME"
		else
			println "Re-Symlinking the package fakeroot to the system root"
			cd "$FAKEROOT"
			stow -R -t / -d "$FAKEROOT" "$PACKAGE_NAME"
		fi
	fi

	# If the package is a font, run fc-cache
	[ -n "$PACKAGE_IS_FONT" ] && fc-cache

	# Add the package into the nest file if the installation was successful
	add_package_to_nest "$PACKAGE_NAME"
	birb_db --update "$PACKAGE_NAME" "$VERSION"

	# Run a post-install hook if the package has specified the _post_install() function
	if [ "$(type -t _post_install)" == "function" ]
	then
		println "Running a post-install commands"
		set_win_title "Installing $PACKAGE_NAME (post-install)"
		_post_install
	fi


	echo "$PACKAGE_NAME installation finished"
	set +e

	# Check if there are notes to print
	[ -n "$NOTES" ] && echo -e "\e[1;33mPackage notes: $NOTES"
	set_win_title "done"

	return 0
}

uninstall_package()
{
	root_check
	PACKAGE_NAME="$1"
	validate_package_name "$PACKAGE_NAME"
	println "Checking if the package $PACKAGE_NAME is installed"
	if [ "$(birb_db --is-installed "$PACKAGE_NAME")" == "no" ]
	then
		echo "$PACKAGE_NAME is not installed"
		return 1
	fi

	# Source the package
	source_pkg_seed "$PACKAGE_NAME"

	# Check if the package is a python package
	IS_PYTHON_PACKAGE="$(echo "$FLAGS" | grep -o "python")"

	# Check if the package is a font
	PACKAGE_IS_FONT="$(echo "$FLAGS" | grep -o "font")"

	# Protect the user from destroying their installation
	IS_PROTECTED="$(echo "$FLAGS" | grep -o "important")"
	if [ -n "$IS_PROTECTED" ]
	then
		echo -e "\e[31m!! WARNING !!\e[0m"
		echo "Removing this package might cause some serious harm to your system"
		echo "and render it partially unusable."
		echo ""
		echo "Please make sure you have a way to restore this package afterwards"
		echo "without the use of a package manager (and possibly other tools"
		echo "that aren't available)"
		echo ""
		read -rp "Continue? [y/N]: " UNINSTALL_PROTECTED_PACKAGE

		case $UNINSTALL_PROTECTED_PACKAGE in
			y|Y|yes|Yes)
				echo "I hope you know what you are doing..."
				;;

			*)
				echo "Cancelled"
				return 1;
				;;
		esac
	fi

	# Check if the package would possibly break any dependencies
	println "Checking dependencies"
	DEPENDENT_PACKAGES="$(birb_dep_solver -r "$PACKAGE_NAME")"

	if [ -n "$DEPENDENT_PACKAGES" ] && [ -z "$YOLO" ]
	then
		echo "The follow packages depend on [$PACKAGE_NAME]:"
		echo -e "$DEPENDENT_PACKAGES" | sed '/^$/d; s/^/ - /'
		println WARNING "Removing this package might cause trouble"

		read -rp "Continue? [y/N]: " UNINSTALL_DEPENDENCY_BREAKING_PACKAGE

		case $UNINSTALL_DEPENDENCY_BREAKING_PACKAGE in
			y|Y|yes|Yes)
				echo "I hope you *really* know what you are doing... ¯\(°_o)/¯"
				;;

			*)
				echo "Cancelled"
				return 1;
				;;
		esac
	fi

	set -e

	# Python packages need to be uninstall by using pip3
	# so they need some special treatment
	if [ -n "$IS_PYTHON_PACKAGE" ]
	then
		yes | pip3 uninstall "$PACKAGE_NAME"
	fi

	println "Unlinking $PACKAGE_NAME..."
	stow -D -t / -d "$FAKEROOT" "$PACKAGE_NAME"

	println "Removing fakeroot"
	rm -r "${FAKEROOT:?}/$PACKAGE_NAME"

	# If the package is a font, run fc-cache
	[ -n "$PACKAGE_IS_FONT" ] && fc-cache

	sed -i "/^$PACKAGE_NAME$/d" $NEST
	birb_db --remove "$PACKAGE_NAME"
	echo "$PACKAGE_NAME uninstalled"
	set +e
}

# Re-stow a fakeroot
# Args: [ package_name ]
relink_package()
{
	root_check
	println "Restoring symlinks for $1"

	# Validate the package name
	if echo "$1" | grep -q "[./!&\\]"
	then
		println ERROR "The package name '$1' isn't valid"
		exit 1
	fi

	# Validate the existance of the fakeroot
	if [ ! -d "$FAKEROOT/$1" ]
	then
		println ERROR "There is no valid fakeroot for $1"
		return 1
	fi

	# Check if the package exists
	if [ -z "$(birb_pkg_search "$1")" ]
	then
		println WARNING "There's no package with the name $1"
	fi

	stow -R -t / -d "$FAKEROOT" "$1"
}

cancel_update()
{
	println "Update cancelled!"

	if [ ! -d "$FAKEROOT/$PKG_UPDATE_IN_PROGRESS" ]
	then
		echo "Restoring fakeroot backup"
		cp -r "${FAKEROOT_BACKUP_PATH:?}/$PKG_UPDATE_IN_PROGRESS" "$FAKEROOT/$PKG_UPDATE_IN_PROGRESS"

		echo "Transferring symlinks back to the original fakeroot"
		stow -D -t / -d "$FAKEROOT_BACKUP_PATH" "$PKG_UPDATE_IN_PROGRESS"
		stow -S -t / -d "$FAKEROOT" "$PKG_UPDATE_IN_PROGRESS"

		echo "Marking the package as installed"
		birb_db --update "$PKG_UPDATE_IN_PROGRESS" "$OLD_VERSION"
	fi
}

update_packages()
{
	println "Checking for out-of-date packages"
	PKGS="$(birb_db --diff)"

	if [ -z "$PKGS" ]
	then
		echo "Everything is up-to-date!"
		exit 0
	fi

	echo -e "\e[1;33mThe following packages can be updated:\e[0m"

	echo "$PKGS" | awk -F';' '{print $1 ";" $2 ";->;" $3}' | column -s ';' -t

	echo ""
	read -rp "Proceed with the update? (y/r/N): " SELECTED_UPDATE_OPTION

	case $SELECTED_UPDATE_OPTION in
		y|Y) ;;
		r|R)
			read -rp "Regex: " REGEX_PATTERN

			echo -e "\e[1;33mThe following packages will be updated:\e[0m"
			echo "$PKGS" | cut -d ';' -f1 | awk "/$REGEX_PATTERN/"
			read -rp "Proceed with the update? (y/N): " AGREE_REGEX_UPDATE
			case $AGREE_REGEX_UPDATE in
				y|Y) ;;
				*)
					echo "Cancelled"
					exit 0
					;;
			esac
			;;
		*)
			echo "Cancelled"
			exit 0
			;;
	esac

	root_check

	println "Starting package updates"

	UPDATE_QUEUE="$(echo "$PKGS" | cut -d';' -f1)"

	# Download all of the packages before starting the update
	# This should help with cases where internet might be disrupted
	# during the update for whatever reason. This could be really annoying
	# if some of the packages have really long compiling times
	for PKG in $UPDATE_QUEUE
	do
		download_src "$PKG"
	done

	# The system might get borked if anything goes wrong
	# after this point
	set -e

	# Make sure that the fakeroot backup directory exists
	mkdir -p $FAKEROOT_BACKUP_PATH

	# Attempt to rescue the situation in-case the user cancels the update
	trap cancel_update SIGINT
	trap cancel_update SIGTERM

	# Loop through pending package updates and install them
	for PKG in $UPDATE_QUEUE
	do
		# Store the PKG variable for the update cancel function trap
		PKG_UPDATE_IN_PROGRESS="$PKG"
		OLD_VERSION="$(birb_db --version "$PKG")"

		println "Backing up $PKG fakeroot"
		if [ -d "$FAKEROOT_BACKUP_PATH/$PKG" ]
		then
			println ERROR "An existing fakeroot backup seems to exist for package $PKG"
			echo "This could mean that the previous update was cancelled prematurely"
			echo "and the system isn't in a fully healthy state."
			echo ""
			echo "To solve this issue, manually move / copy the fakeroot directory"
			echo "to $FAKEROOT/$PKG and run this command: birb --relink $PKG"
			echo ""
			echo "If the program works after this, you *should* be able to safely"
			echo "remove the backup fakeroot and try to run this update again"
			exit 1
		fi
		cp -r "${FAKEROOT:?}/$PKG" "${FAKEROOT_BACKUP_PATH:?}/$PKG"

		println "Transferring symlinks to the backup copy of $PKG"
		stow -D -t / -d "$FAKEROOT" "$PKG"
		stow -S -t / -d "$FAKEROOT_BACKUP_PATH" "$PKG"

		println "Removing the fakeroot for $PKG"
		rm -r "${FAKEROOT:?}/$PKG"

		# Trick birb into thinking that the package isn't installed
		birb_db --remove "$PKG"

		# Update the package by installing as usual, but skip the symlink
		# part at the end of the installation process. We'll do that here
		# by transferring the symlinks back from the backup
		BIRB_PKG_UPDATE="true" birb --install "$PKG"

		println "Transferring symlinks from the backup copy of $PKG back to the real fakeroot"
		stow -D -t / -d "$FAKEROOT_BACKUP_PATH" "$PKG"
		stow -S -t / -d "$FAKEROOT" "$PKG"

		println "Removing the backup fakeroot"
		rm -r "${FAKEROOT_BACKUP_PATH:?}/$PKG"

		println "$PKG updated successfully"
	done

	set +e
}

search_package()
{
	RESULTS="$(grep "$1" $PACKAGE_LIST)"

	# Print result names with their descriptions
	# shellcheck disable=SC2086
	RESULT_TABLE="$(birb_pkg_search $RESULTS)"

	COLS=$(("$(tput cols)"-3))
	echo -e "$RESULT_TABLE" | column -s ";" -t -T 3 -c $COLS
}

browse_packages()
{
	if [ ! -f /usr/bin/fzf ]
	then
		println ERROR "This feature needs the \e[1mfzf\e[0m\e[31m package to be installed\e[0m"
		exit 1
	fi

	search_package "" | fzf --height=10 | awk '{print $1}'
}

cache_package_list()
{
	println "Caching the package lists"
	# shellcheck disable=SC2046
	find $(birb_db --list-repositories | cut -d';' -f3) -maxdepth 1 -not -path '*/[@.]*' -type d -printf "%f\n" | sed '/^pkg$/d' > $PACKAGE_LIST
}

# Check if there are updates available and print a notification
# if there are updates one would be able to install
birb_update_check()
{
	println "Checking if birb is up-to-date"
	cd "$BIRB_DIST"

	git fetch
	BIRB_BRANCH_STATUS="$(git status | grep "Your branch is behind")"

	if [ -n "$BIRB_BRANCH_STATUS" ]
	then
		echo -e "\e[1;33mThere's an update available for \e[1mbirb\e[0m\e[1;33m! It is highly recommended to upgrade birb before installing anything."
	fi
}

sync_packages()
{
	root_check
	println "Syncing package repositories"

	# Notify about the repository reset
	if [ "$1" == "force" ]
	then
		println "Hard resetting repositories"
	fi

	# Get list of repositories
	REPO_LIST="$(birb_db --list-repositories)"

	# Loop through the repositories and sync them
	for REPO in $REPO_LIST
	do
		REPOSITORY_NAME="$(echo "$REPO" | cut -d';' -f1)"
		REPOSITORY_URL="$(echo "$REPO" | cut -d';' -f2)"
		REPOSITORY_PATH="$(echo "$REPO" | cut -d';' -f3)"

		println "Syncing $REPOSITORY_NAME"

		# Check if the repository exists
		if [ ! -d "$REPOSITORY_PATH" ]
		then
			# The repository doesn't seem to exist
			# Clone the repository
			println WARNING "The repo $REPOSITORY_NAME was missing. Cloning it..."
			git clone "$REPOSITORY_URL" "$REPOSITORY_PATH"
		fi

		cd "$REPOSITORY_PATH"

		if [ "$1" == "force" ]
		then
			git reset --hard
			git config pull.rebase true
		fi

		git fetch ; git pull
	done


	# Cache the package list
	cache_package_list

	# Check if there are birb updates available
	birb_update_check
}

list_installed()
{
	birb_db --list | cut -d';' -f1
}

birb_upgrade()
{
	root_check
	println "Upgrading birb ^-^"
	[ "$1" == "debug" ] && echo " --- Debug mode enabled ＿φ(°-°=) ---"
	[ "$BIRB_DEV_MODE" == "true" ] && echo " ----- Development mode enabled (O_O;) -----"

	# Check if birb is in the distfile cache
	# If it doesn't, clone it with git
	if [ ! -d "$BIRB_DIST" ]
	then
		# Ensure that the distfiles directory exists
		mkdir -p "$DISTFILES"

		cd "$DISTFILES"
		println "Cloning birb sources"
		git clone $BIRB_REMOTE
	fi

	# If the package list cache doesn't exist yet, create it
	[ ! -f /var/lib/birb/packages ] && cache_package_list

	# Avoid breaking the package manager
	set -e

	cd "$BIRB_DIST"

	# Check if we are in the correct branch
	CURRENT_BIRB_BRANCH="$(git status | head -n1 | cut -d' ' -f3)"
	case $CURRENT_BIRB_BRANCH in
		# We are in a stable branch
		main)
			case $BIRB_DEV_MODE in
				true) git checkout dev ;;
				*) ;;
			esac
			;;

		# We are in a development branch
		dev)
			case $BIRB_DEV_MODE in
				true) ;;
				*) git switch main ;;
			esac
			;;

		# We are in some other branch, switch back to main
		*) git switch main ;;
	esac

	git fetch
	git pull

	make clean

	DEBUG_CXXFLAGS="-g -Weffc++"
	RELEASE_CXXFLAGS="-O1 -flto=auto -march=native -DNDEBUG"

	if [ "$1" == "debug" ]
	then
		make CXXFLAGS="$DEBUG_CXXFLAGS"
	else
		make CXXFLAGS="-fprofile-generate $RELEASE_CXXFLAGS" "-j$(nproc)"
		./pgo_run.sh
		make -B CXXFLAGS="-fprofile-use $RELEASE_CXXFLAGS" "-j$(nproc)"
	fi

	if [ "$1" == "test" ]
	then
		make CXXFLAGS="$RELEASE_CXXFLAGS -DBIRB_TEST" "-j$(nproc)" birb_test

		# Run the tests and cancel the upgrade if they fail
		./birb_test || { println ERROR "Tests failed! Cancelling the upgrade..."; exit 1; }
	fi

	make install

	println "Upgrade finished successfully"
	exit 0
}

install_meta_package()
{
	validate_package_name "$1"
	META_PACKAGE_RESULT="$(awk "/^$1:/" "$REPO_DIR/meta_packages")"
	if [ -n "$META_PACKAGE_RESULT" ]
	then
		# If a result was found, expand the meta package into a list
		# of packages to install
		PACKAGES_TO_INSTALL="$(awk -F':' "/^$1/ {print \$2}" "$REPO_DIR/meta_packages")"

		echo -e "The following packages will be installed:\n$PACKAGES_TO_INSTALL\n"
		echo "Packages that are already installed will be skipped"
		read -rp "Do you want to process? [Y/n]: " AGREE_INSTALL_META_PACKAGES
		case $AGREE_INSTALL_META_PACKAGES in
			n|N|n*|N*)
				echo "Cancelled"
				exit 1
				;;

			""|y|Y|y*|Y*) ;;

			*)
				echo "Cancelled"
				exit 1
				;;
		esac

		SKIP_INSTALLED_PACKAGES="true"
		for i in $PACKAGES_TO_INSTALL
		do
			install_package "$i"
		done
		shift
	else
		return 1
	fi

	return 0
}

# Attempt to recover a broken system by using the
# package database as a ground truth for what should be installed
# on the system. This way we can reinstall packages that have their
# files missing, but the system still thinks that the package is already
# installed
fakeroot_repair()
{
	println "Attempting to reinstall packages with missing fakeroots"

	# Get list of all packages that *should* be installed on the system
	INSTALLED_PACKAGES="$(birb_db --list | cut -d';' -f1)"

	# Loop through the packages and check if their fakeroots exist
	for i in $INSTALLED_PACKAGES
	do
		if [ ! -d "$FAKEROOT/$i" ]
		then
			# Force reinstall the package
			if yes | birb --install "$i"
			then
				echo "Non-zero exit status from birb! Stopping..."
				exit 1
			fi
		fi
	done
}


# Check if the first argument is a valid package name
if [ -d "$REPO_DIR/$1" ]
then
	# Process the arguments as package names and install
	# all of them
	while test $# -gt 0; do
		install_package "$1"
		shift
	done
fi


# Check if the first argument is a valid meta package
install_meta_package "$1" && shift

# Go through all of the arguments
while test $# -gt 0; do
	case $1 in
		--help)
			shift
			print_help
			exit 0
			;;

		--depclean)
			shift
			remove_orphan_dependencies
			exit 0
			;;

		--download)
			shift

			while test $# -gt 0; do
				download_src "$1"
				shift
			done

			exit 0
			;;

		-i|--install)
			shift

			case $1 in
				--overwrite)
					shift
					export OVERWRITE_FILES="yes"
					;;

				--test)
					shift
					export ENABLE_TESTS="yes"
					;;
			esac

			# Install all listed packages
			while test $# -gt 0; do
				# First attempt to install the package as a meta package
				# If one doesn't exist, try to install it as a normal package
				install_meta_package "$1" || install_package "$1"
				shift
			done
			;;

		-u|--uninstall)
			shift

			while test $# -gt 0; do
				uninstall_package "$1"
				shift
			done

			exit 0
			;;

		--relink)
			shift

			while test $# -gt 0; do
				relink_package "$1"
				shift
			done

			exit 0
			;;

		--update)
			shift
			update_packages
			exit 0
			;;

		-s|--search)
			shift
			search_package "$1"
			shift
			;;

		-b|--browse)
			browse_packages
			exit 0
			;;

		--source)
			shift
			root_check
			cd "$REPO_DIR"
			case $1 in
				status)
					BRANCH="$(git status | awk '/^On branch/ {print $3}')"
					case $BRANCH in
						master) echo "stable" ;;
						dev) 	echo "testing" ;;
					esac
					;;

				stable)
					echo "Swiching to the stable master branch..."
					git checkout master
					sync_packages
					;;

				testing|dev)
					if [ "$BIRB_DEV_MODE" == "true" ]
					then
						echo "Switching to the unstable development branch..."
						git checkout dev
						sync_packages
					else
						echo "You need to set birb to developer mode if you want to use the unstable repo branch"
					fi
					;;

				*)
					println ERROR "Invalid argument: $1"
					exit 1
					;;
			esac
			shift
			;;

		--sync)
			shift
			case $1 in
				--force)
					sync_packages force
					;;

				*)
					sync_packages
					;;
			esac

			# Exit after a successful sync
			exit 0
			;;

		--list-installed)
			shift
			list_installed
			;;

		--upgrade)
			shift
			case $1 in
				--debug)
					birb_upgrade debug
					;;

				--test)
					birb_upgrade test
					;;

				*)
					birb_upgrade
					;;
			esac
			;;

		--repair)
			shift
			fakeroot_repair
			;;

		-*)
			echo "Invalid argument: $1"
			exit 1
			;;

		*)
			echo "Package $1 does not exist (╥_╥)"
			exit 1
		;;
	esac
done
