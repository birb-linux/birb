#!/bin/bash

# Check if the LFS variable is set
# If it isn't empty, it means that we are installing
# BirbOS and the LFS variable should be used as the
# installation prefix, so that all of the files end
# up into the correct directory
INSTALL_PREFIX="$LFS"

REPO_DIR="$INSTALL_PREFIX/var/db/pkg"
DB_DIR="/var/lib/birb"
NEST="$DB_DIR/nest"
PACKAGE_LIST="$DB_DIR/packages"
export DISTFILES="$INSTALL_PREFIX/var/cache/distfiles"
export FAKEROOT="$INSTALL_PREFIX/var/db/fakeroot"
export PYTHON_DIST="usr/python_dist"
export PATH="/usr/bin:/usr/sbin:/usr/local/bin:/usr/python_bin"
export ACLOCAL_PATH=/usr/share/aclocal

# Load the configuration file (if it exists)
BIRB_CFG_PATH="/etc/birb.conf"
[ -f "$BIRB_CFG_PATH" ] && source "$BIRB_CFG_PATH"

println()
{
	case $1 in
		ERROR) echo -e "\e[31mERROR: $2\e[0m" ;;
		WARNING) echo -e "\e[35mWARNING: $2\e[0m" ;;
		*) echo -e "\e[32m=> \e[0m$@" ;;
	esac
}


print_help()
{
	echo "Usage: birb [OPTIONS...] [ARGUMENTS...] [PACKAGE(s)...]"
	echo ""
	echo "      --help                         display this help page and exit"
	echo "      --download PACKAGE(s)          download the source tarball for the given package"
	echo "      --install [--test] PACKAGE(s)  install given package(s) to the filesystem"
	echo "      --uninstall PACKAGE(s)         uninstall given package(s) from the filesystem"
	echo "  -s  --search                       search for packages by name"
	echo "      --sync [--force]               sync package repositories"
	echo "      --list-installed               list all currently installed packages"
	echo "      --upgrade [--debug]            update the birb package manager"
	echo ""
	echo "If a valid package names are given as the only arguments, birb will attempt"
	echo "downloading and installing them"
}

if [ -z $1 ]
then
	print_help
	exit 0
fi

# Args: [file path] [checksum]
# Return values:
# 0 = Checksums match
# 1 = Checksums didn't match
checksum_check()
{
	FILE_PATH="$1"
	GOAL_CHECKSUM="$2"

	FILE_CHECKSUM="$(md5sum $DISTFILES/$TARBALL | cut -d' ' -f1)"

	# Make sure that either of the checksums aren't empty
	[ -z $GOAL_CHECKSUM ] && echo "1"
	[ -z $FILE_CHECKSUM ] && echo "1"

	[ "$GOAL_CHECKSUM" == "$FILE_CHECKSUM" ] && echo "0" || echo "1"
}

root_check()
{
	if [ "$(whoami)" != "root" ]
	then
		println ERROR "This command needs to be run with root privileges"
		exit 1
	fi
}

# Check if the kernel has certain settings enabled
kernel_check()
{
	# There might be some errors, we can ignore them
	set +e
	REQUIRED_FLAGS="$1"

	println "Checking kernel configuration"
	KERNEL_CONFIG_PATH="/usr/src/linux/.config"
	[ ! -f "$KERNEL_CONFIG_PATH" ] && println ERROR "Can't find the kernel config! ($KERNEL_CONFIG_PATH)" && exit 1

	CONFIG_ERROR=""
	for i in $REQUIRED_FLAGS
	do
		if [ -z "$(grep -o "^${i}=[ym]" $KERNEL_CONFIG_PATH)" ]
		then
			if [ -z "$CONFIG_ERROR" ]
			then
				echo "Missing required kernel options: "
			fi
			CONFIG_ERROR="yes"

			echo "$i"
		fi
	done
	set -e

	[ -n "$CONFIG_ERROR" ] && return 1
	return 0
}

source_pkg_seed()
{
	source $REPO_DIR/$1/seed.sh
}

# Download a tarball for the given package using wget
# The tarball will be stored to /var/cache/distfiles
download_src()
{
	PKG_PATH="$INSTALL_PREFIX/var/db/pkg/$1"

	# Check if a package with this name is in the repositories
	if [ ! -d $PKG_PATH ]
	then
		echo "ERROR: There's no package with the name [$1]"
		exit 1
	fi

	# Source the package variables
	source_pkg_seed $1

	# Make sure that the package has a checksum
	[ -z "$CHECKSUM" ] && println ERROR "Package [$NAME] doesn't define a checksum! The package won't be downloaded." && return 1

	# Get the tarball name from the download URL
	TARBALL="$(basename $SOURCE)"

	println "Fetching $TARBALL..."

	# Check if the package tarball has already been downloaded
	# and the checksum matches
	if [ -f "$DISTFILES/$TARBALL" ]
	then
		echo "Found [$TARBALL] in distcache"
		if [ "$(checksum_check "$DISTFILES/$TARBALL" "$CHECKSUM")" == "0" ]
		then
			# The tarball has already been downloaded and the download can
			# be skipped without any issues
			return 0
		else
			echo "[$TARBALL] checksum doesn't match the package checksum! The package needs to be re-downloaded"
		fi
	fi

	# Make sure that wget is installed on the system
	[ ! -f /usr/bin/wget ] && println ERROR "wget isn't installed! Birb cannot download anything without it (╯°□°)╯︵ ┻━┻" && exit 1

	# Download the source tarball
	wget --directory-prefix=$DISTFILES $SOURCE

	# Check the MD5 checksum
	if [ "$(checksum_check "$DISTFILES/$TARBALL" "$CHECKSUM")" == "1" ]
	then
		println WARNING "There was a checksum mismatch. The downloaded archive will be removed to prevent installing a possibly corrupt package. Please re-try downloading it"
		rm -v $DISTFILES/$TARBALL
		return 1
	fi
}

# Create some basic directories for the fakeroot
# in case the package isn't going to create those directories
# and gets confused
prepare_fakeroot()
{
	mkdir -p $1/{usr/{lib/bfd-plugins,lib32,share/{doc,man/man{1..8}},bin,sbin,include},etc,sbin}
	mkdir -p $1/usr/share/fonts/TTF
}

# If the use flag has been set in the config file, expand it into some command
# This is useful for customizing how programs get compiled and can be used
# to minimize dependencies
expand_use()
{
	PKG_FLAG="$1"
	OUTPUT="$2"

	# Check if a useflag is set by using grep
	HAS_FLAG="$(echo "$USE_FLAGS" | grep -wo "$PKG_FLAG")"

	# If the flag had been specified, expand it into the OUTPUT
	# text
	if [ -n "$HAS_FLAG" ]
	then
		echo "$OUTPUT"
	fi
}

install_package()
{
	root_check
	PACKAGE_NAME="$1"
	export PKG_PATH="$INSTALL_PREFIX/var/db/pkg/$PACKAGE_NAME"

	# Check if a package with this name is in the repositories
	if [ ! -d $PKG_PATH ]
	then
		echo "ERROR: There's no package with the name [$PACKAGE_NAME]"
		exit 1
	fi

	# Check if the package is already installed
	if [ -n "$(grep -x $PACKAGE_NAME $NEST)" ]
	then
		# Skip this package is SKIP_INSTALLED_PACKAGES has been set
		if [ -n "$SKIP_INSTALLED_PACKAGES" ]
		then
			return 0;
		fi

		echo "$PACKAGE_NAME is already installed"
		read -p "Force a reinstall? [y/N]: " AGREE_FORCE_REINSTALL
		case $AGREE_FORCE_REINSTALL in
			y|Y|yes|Yes)
				FORCE_REINSTALL="yes"
				;;

			*)
				echo "Cancelled"
				return 1;
				;;
		esac
	else
		# If the package isn't already installed, but a fakeroot for it exists,
		# delete the fakeroot to avoid any dangling / corrupt files
		[ -d "$FAKEROOT/$PACKAGE_NAME" ] && println "Deleting an existing fakeroot" && rm -r "$FAKEROOT/$PACKAGE_NAME"
	fi

	# Reset all package variables in-case some package has omitted
	# a variable or two
	NAME=""
	DESC=""
	VERSION=""
	SOURCE=""
	CHECKSUM=""
	DEPS=""
	FLAGS=""

	# Source the package variables and functions
	source_pkg_seed $PACKAGE_NAME

	# Export env variables used for installing Xorg related packages
	export XORG_PREFIX="$FAKEROOT/$NAME/usr"
	export XORG_CONFIG="--prefix=$XORG_PREFIX --sysconfdir=/etc \
		--localstatedir=/var --disable-static"

	# Check if the dependency requirements are met
	println "Checking dependencies"
	RECURSIVE_DEPENDENCIES="$(birb_dep_solver $NAME)"
	if [ $? -eq 2 ]
	then
		println ERROR "Something wen't wrong with dependency resolution..."
		echo "Dependency solver output: $RECURSIVE_DEPENDENCIES"
		exit 2
	fi
	HAD_MISSING_DEP=""
	for i in $RECURSIVE_DEPENDENCIES
	do
		# Check if the dependency is installed
		if [ -z "$(grep -x $i $NEST)" ]
		then
			HAD_MISSING_DEP="yes"
			DEPS_TO_INSTALL="$DEPS_TO_INSTALL $i"
			echo "[ ] $i"
			continue
		else
			echo -e "[✓] $i"
		fi
	done

	if [ "$HAD_MISSING_DEP" == "yes" ]
	then
		echo "Missing dependencies were found. Would you like to attempt installing them?"
		read -p "[Y/n]: " AGREE_INSTALL_DEPS
		case $AGREE_INSTALL_DEPS in
			n|N|n*|N*)
				echo "Cancelled"
				exit 1
				;;

			""|y|Y|y*|Y*) ;;

			*)
				echo "Cancelled"
				exit 1
				;;
		esac

		println "Attempting to install the following packages: [$DEPS_TO_INSTALL]"
		birb $DEPS_TO_INSTALL || { echo "Something went wrong while trying to install dependencies. Cancelling the mission..."; exit 1; }
	fi

	# Attempt to download the package
	download_src $PACKAGE_NAME
	[ $? -eq 1 ] && echo "Error during downloading [$PACKAGE_NAME]. Aborting the mission..." && exit 1


	# Make sure that the package has set all of the required variables
	[ -z "$NAME" ] 		&& echo "Encountered a package with a missing name! Aborting the mission..." && exit 1
	[ -z "$SOURCE" ] 	&& echo "Encountered a package without a tarball source! Aborting the mission..." && exit 1
	[ -z "$CHECKSUM" ] 	&& echo "Encountered a package without a checksum! Aborting the mission..." && exit 1

	# Check if the package wants to also build 32bit libraries
	ENABLE_32BIT="$(echo "$FLAGS" | grep -o "32bit")"

	# Check if there are tests in the package
	PACKAGE_HAS_TESTS="$(echo "$FLAGS" | grep -o "test")"
	PACKAGE_HAS_32BIT_TESTS="$(echo "$FLAGS" | grep -o "test32")"

	set -e

	# Extract the package sources and do any required setup
	export GOPATH="/usr/share/go"
	export PYTHON_PREFIX="$FAKEROOT/$NAME/$PYTHON_DIST"
	export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib32/pkgconfig"
	TEMPORARY_BUILD_DIR="/tmp/birb_package_build"
	rm -rf $TEMPORARY_BUILD_DIR
	mkdir -p $TEMPORARY_BUILD_DIR
	cd $TEMPORARY_BUILD_DIR
	println "Setting things up for compiling"
	_setup

	# Build the package
	println "Building the package"
	_build

	# Run tests if the package has them and the user
	# has enabled test running
	if [ -n "$PACKAGE_HAS_TESTS" ] && [ -n "$ENABLE_TESTS" ]
	then
		println "Running tests"
		_test
	fi

	# Install the package into fakeroot directory
	println "Installing the package"
	prepare_fakeroot $FAKEROOT/$PACKAGE_NAME
	_install

	if [ -n "$ENABLE_32BIT" ]
	then
		println "Building the package with 32-bit libraries"
		_build32

		# Run 32-bit tests if the test32 flag is specified
		if [ -n "$PACKAGE_HAS_32BIT_TESTS" ] && [ -n "$ENABLE_TESTS" ]
		then
			println "Running 32-bit tests"
			_test32
		fi

		println "Installing 32-bit libraries"
		_install32
	fi

	# Clean things up
	println "Cleaning up"
	rm -r $TEMPORARY_BUILD_DIR

	# Remove all empty directories from the fakeroot
	find $FAKEROOT/$PACKAGE_NAME -type d -empty -delete

	# If removing all of the empty directories got rid of the entire
	# fakeroot, we can assume the following things:
	# A) The package installation did nothing and just printed text on the screen
	# B) The package didn't install anything
	# C) The package "absorbed" itself into the system and didn't have anything to install to the fakeroot
	# D) The package was misconfigured and the files went to the wrong place
	#
	# We'll assume here that this is a C case
	if [ ! -d $FAKEROOT/$PACKAGE_NAME ]
	then
		println "Hmh... It looks like the package got absorbed into the system with no fakeroot left"
		echo "Since there's no fakeroot, there's nothing else to install. Also the package cannot be tracked and/or uninstalled, so good luck with that"
		echo "This could be an intended 'feature' and not a bug, but if you are unsure, please report this message to the package maintainer"
		println "Marking the package as 'installed'"
		[ -z "$(grep -x $PACKAGE_NAME $NEST)" ] && echo "$PACKAGE_NAME" >> $NEST
		return 0;
	fi

	# Skip the file deletion part when reinstalling
	if [ -z "$FORCE_REINSTALL" ]
	then
		# Stow the fakeroot directory to the root directory
		println "Finding and deleting conflicting files"
		cd $FAKEROOT
		set +e
		FILES_TO_DELETE="$(stow -S -t / -d $FAKEROOT $PACKAGE_NAME &>/dev/stdout | grep "existing target is not owned by stow" | awk -F' ' '{print "/" $9}')"
		set -e
		rm -f $FILES_TO_DELETE

		# Do another round of deletions in case there's some other error
		set +e
		FILES_TO_DELETE="$(stow -S -t / -d $FAKEROOT $PACKAGE_NAME &>/dev/stdout | grep "existing target is neither a link nor a directory" | awk -F' ' '{print "/" $11}')"
		set -e
		rm -f $FILES_TO_DELETE
	fi

	# Make sure the package doesn't attempt to install the /usr/share/info/dir file
	# because lots of packages want to write into it and that causes conflicts with stow
	rm -f $FAKEROOT/$PACKAGE_NAME/usr/share/info/dir


	if [ -z "$FORCE_REINSTALL" ]
	then
		println "Symlinking the package fakeroot to the system root"
		stow -S -t / -d $FAKEROOT $PACKAGE_NAME
	else
		println "Re-Symlinking the package fakeroot to the system root"
		cd $FAKEROOT
		stow -R -t / -d $FAKEROOT $PACKAGE_NAME
	fi

	# If the package is a font, run fc-cache
	PACKAGE_IS_FONT="$(echo "$FLAGS" | grep -o "font")"
	[ -n "$PACKAGE_IS_FONT" ] && fc-cache


	# Add the package into the nest file if the installation was successful
	[ -z "$(grep -x $PACKAGE_NAME $NEST)" ] && echo "$PACKAGE_NAME" >> $NEST

	echo "$PACKAGE_NAME installation finished"
	set +e
}

uninstall_package()
{
	root_check
	PACKAGE_NAME="$1"
	println "Checking if the package $PACKAGE_NAME is in the nest"
	if [ -z "$(grep -x $PACKAGE_NAME $NEST)" ]
	then
		echo "$PACKAGE_NAME is not installed"
		return 1
	fi

	# Source the package
	source_pkg_seed "$PACKAGE_NAME"

	# Check if the package is a python package
	IS_PYTHON_PACKAGE="$(echo "$FLAGS" | grep -o "python")"

	# Protect the user from destroying their installation
	IS_PROTECTED="$(echo "$FLAGS" | grep -o "important")"
	if [ -n "$IS_PROTECTED" ]
	then
		echo -e "\e[31m!! WARNING !!\e[0m"
		echo "Removing this package might cause some serious harm to your system"
		echo "and render it partially unusable."
		echo ""
		echo "Please make sure you have a way to restore this package afterwards"
		echo "without the use of a package manager (and possibly other tools"
		echo "that aren't available)"
		echo ""
		read -p "Continue? [y/N]: " UNINSTALL_PROTECTED_PACKAGE

		case $UNINSTALL_PROTECTED_PACKAGE in
			y|Y|yes|Yes)
				echo "I hope you know what you are doing..."
				;;

			*)
				echo "Cancelled"
				return 1;
				;;
		esac
	fi

	# Check if the package would possibly break any dependencies
	println "Checking dependencies"
	while read PACKAGE_TO_CHECK
	do
		source $INSTALL_PREFIX/var/db/pkg/$PACKAGE_TO_CHECK/seed.sh
		DEPENDENCY_FOUND="$(echo "$DEPS" | grep -w "$PACKAGE_NAME")"
		if [ -n "$DEPENDENCY_FOUND" ]
		then
			DEPENDENT_PACKAGES="${DEPENDENT_PACKAGES}${PACKAGE_TO_CHECK}\n"
		fi
	done < "${NEST}"

	if [ -n "$DEPENDENT_PACKAGES" ]
	then
		echo "The follow packages depend on [$PACKAGE_NAME]:"
		echo -e "$DEPENDENT_PACKAGES" | sed '/^$/d; s/^/ - /'
		println WARNING "Removing this package might cause trouble"

		read -p "Continue? [y/N]: " UNINSTALL_DEPENDENCY_BREAKING_PACKAGE

		case $UNINSTALL_DEPENDENCY_BREAKING_PACKAGE in
			y|Y|yes|Yes)
				echo "I hope you *really* know what you are doing... ¯\(°_o)/¯"
				;;

			*)
				echo "Cancelled"
				return 1;
				;;
		esac
	fi

	set -e

	# Python packages need to be uninstall by using pip3
	# so they need some special treatment
	if [ -n "$IS_PYTHON_PACKAGE" ]
	then
		yes | pip3 uninstall $PACKAGE_NAME
	fi

	println "Unlinking $PACKAGE_NAME..."
	stow -D -t / -d $FAKEROOT $PACKAGE_NAME

	println "Removing fakeroot"
	rm -r $FAKEROOT/$PACKAGE_NAME

	sed -i "/^$PACKAGE_NAME$/d" $NEST
	echo "$PACKAGE_NAME uninstalled"
	set +e
}

search_package()
{
	RESULTS="$(grep "$1" $PACKAGE_LIST)"

	# Print result names with their descriptions
	RESULT_TABLE="$(birb_pkg_search $RESULTS)"

	echo -e "$RESULT_TABLE" | column -s ";" -t
}

sync_packages()
{
	root_check
	println "Syncing package repositories"
	cd $REPO_DIR

	if [ "$1" == "force" ]
	then
		println "Hard resetting repositories"
		git reset --hard
	fi

	git fetch ; git pull

	# Cache the package list
	println "Caching the package lists"
	find /var/db/pkg -maxdepth 1 -not -path '*/[@.]*' -type d -printf "%f\n" | sed '/^pkg$/d' > $PACKAGE_LIST
}

list_installed()
{
	cat $NEST
}

birb_upgrade()
{
	root_check
	println "Upgrading birb ^-^"
	[ "$1" == "debug" ] && echo " --- Debug mode enabled ＿φ(°-°=) ---"

	BIRB_DIST="$DISTFILES/birb"

	# Check if birb is in the distfile cache
	# If it doesn't, clone it with git
	if [ ! -d "$BIRB_DIST" ]
	then
		cd $DISTFILES
		println "Cloning birb sources"
		git clone https://github.com/Toasterbirb/birb
	fi

	# Avoid breaking the package manager
	set -e

	cd $BIRB_DIST
	git fetch
	git pull

	make clean
	[ "$1" == "debug" ] && make || make release
	make install

	println "Upgrade finished successfully"
	exit 0
}

install_meta_package()
{
	META_PACKAGE_RESULT="$(awk "/^$1:/" $REPO_DIR/meta_packages)"
	if [ -n "$META_PACKAGE_RESULT" ]
	then
		# If a result was found, expand the meta package into a list
		# of packages to install
		PACKAGES_TO_INSTALL="$(awk -F':' "/^$1/ {print \$2}" $REPO_DIR/meta_packages)"

		echo -e "The following packages will be installed:\n$PACKAGES_TO_INSTALL\n"
		echo "Packages that are already installed will be skipped"
		read -p "Do you want to process? [Y/n]: " AGREE_INSTALL_META_PACKAGES
		case $AGREE_INSTALL_META_PACKAGES in
			n|N|n*|N*)
				echo "Cancelled"
				exit 1
				;;

			""|y|Y|y*|Y*) ;;

			*)
				echo "Cancelled"
				exit 1
				;;
		esac

		SKIP_INSTALLED_PACKAGES="true"
		for i in $PACKAGES_TO_INSTALL
		do
			install_package "$i"
		done
		shift
	else
		return 1
	fi

	return 0
}


# Check if the first argument is a valid package name
if [ -d "$REPO_DIR/$1" ]
then
	# Process the arguments as package names and install
	# all of them
	while test $# -gt 0; do
		install_package "$1"
		shift
	done
fi


# Check if the first argument is a valid meta package
install_meta_package $1 && shift

# Go through all of the arguments
while test $# -gt 0; do
	case $1 in
		--help)
			shift
			print_help
			exit 0
			;;

		--download)
			shift

			while test $# -gt 0; do
				download_src $1
				shift
			done

			exit 0
			;;

		--install)
			shift

			case $1 in
				--test)
					shift
					export ENABLE_TESTS="yes"
					;;
			esac

			# Install all listed packages
			while test $# -gt 0; do
				# First attempt to install the package as a meta package
				# If one doesn't exist, try to install it as a normal package
				install_meta_package $1 || install_package "$1"
				shift
			done
			;;

		--uninstall)
			shift

			while test $# -gt 0; do
				uninstall_package $1
				shift
			done

			exit 0
			;;

		-s|--search)
			shift
			search_package $1
			shift
			;;

		--sync)
			shift
			case $1 in
				--force)
					sync_packages force
					;;

				*)
					sync_packages
					;;
			esac
			shift
			;;

		--list-installed)
			shift
			list_installed
			;;

		--upgrade)
			shift
			case $1 in
				--debug)
					birb_upgrade debug
					;;

				*)
					birb_upgrade
					;;
			esac
			exit 0
			;;

		*)
			echo "Package $1 does not exist"
			exit 1
		;;
	esac
done
