#!/bin/bash

# Check if the LFS variable is set
# If it isn't empty, it means that we are installing
# BirbOS and the LFS variable should be used as the
# installation prefix, so that all of the files end
# up into the correct directory
INSTALL_PREFIX="$LFS"

REPO_DIR="$INSTALL_PREFIX/var/db/pkg"
NEST="/var/lib/birb/nest"
export DISTFILES="$INSTALL_PREFIX/var/cache/distfiles"
export FAKEROOT="$INSTALL_PREFIX/var/db/fakeroot"

print_help()
{
	echo "Usage: birb [OPTIONS...] [ARGUMENTS...] [PACKAGE(s)...]"
	echo ""
	echo "      --help                 display this help page and exit"
	echo "      --download PACKAGE(s)  download the source tarball for the given package"
	echo ""
	echo "If a valid package names are given as the only arguments, birb will attempt"
	echo "downloading and installing them"
}

if [ -z $1 ]
then
	print_help
	exit 0
fi

# Args: [file path] [checksum]
# Return values:
# 0 = Checksums match
# 1 = Checksums didn't match
checksum_check()
{
	FILE_PATH="$1"
	GOAL_CHECKSUM="$2"

	FILE_CHECKSUM="$(md5sum $DISTFILES/$TARBALL | cut -d' ' -f1)"

	# Make sure that either of the checksums aren't empty
	[ -z $GOAL_CHECKSUM ] && echo "1"
	[ -z $FILE_CHECKSUM ] && echo "1"

	[ "$GOAL_CHECKSUM" == "$FILE_CHECKSUM" ] && echo "0" || echo "1"
}

source_pkg_seed()
{
	source $REPO_DIR/$1/seed.sh
}

# Download a tarball for the given package using wget
# The tarball will be stored to /var/cache/distfiles
download_src()
{
	# Source the package variables
	source_pkg_seed $1

	# Get the tarball name from the download URL
	TARBALL="$(basename $SOURCE)"

	echo "Fetching $TARBALL..."

	# Check if the package tarball has already been downloaded
	# and the checksum matches
	if [ -f "$DISTFILES/$TARBALL" ]
	then
		echo "Found [$TARBALL] in distcache. Comparing checksums..."
		if [ "$(checksum_check "$DISTFILES/$TARBALL" "$CHECKSUM")" == "0" ]
		then
			# The tarball has already been downloaded and the download can
			# be skipped without any issues
			echo "Skipping [$1] as its already downloaded"
			return 0
		fi
	fi

	# Download the source tarball
	wget --directory-prefix=$DISTFILES $SOURCE

	# Check the MD5 checksum
	if [ "$(checksum_check "$DISTFILES/$TARBALL" "$CHECKSUM")" == "1" ]
	then
		echo "WARNING! There was a checksum mismatch. The downloaded archive will be removed to prevent installing a possibly corrupt package. Please re-try downloading it"
		rm -v $DISTFILES/$TARBALL
		return 1
	fi
}

install_package()
{
	PACKAGE_NAME="$1"

	# Check if the package is already installed
	if [ -n "$(grep -x $PACKAGE_NAME $NEST)" ]
	then
		echo "$PACKAGE_NAME is already installed! Skipping..."
		return 1
	fi

	# Attempt to download the package
	[ $(download_src "$PACKAGE_NAME") -eq 1 ] && echo "Error during downloading [$PACKAGE_NAME]. Aborting the mission..." && exit 1

	set -e

	# Source the package variables and functions
	source_pkg_seed $PACKAGE_NAME

	# TODO: Extract the files to /tmp instead of distfiles
	# Extract the package sources and do any required setup
	cd $DISTFILES
	echo "=> Setting things up for compiling"
	_setup

	# Build the package
	echo "=> Building the package"
	_build

	# Install the package into fakeroot directory
	echo "=> Installing the package"
	_install

	# Clean things up
	echo "=> Cleaning up"
	_cleanup

	# Stow the fakeroot directory to the root directory
	echo "=> Symlinking the package fakeroot to the system root"
	cd $FAKEROOT
	stow -S -t / -d $FAKEROOT $PACKAGE_NAME

	# Add the package into the nest file if the installation was successful
	echo "$PACKAGE_NAME" >> $NEST

	echo "$PACKAGE_NAME installation finished"
	set +e
}

# Check if the first argument is a valid package name
if [ -d "$REPO_DIR/$1" ]
then
	# Process the arguments as package names and install
	# all of them
	while test $# -gt 0; do
		install_package "$1"
		shift
	done
fi

# Go through all of the arguments
while test $# -gt 0; do
	case $1 in
		--help)
			shift
			print_help
			exit 0
			;;

		--download)
			shift

			while test $# -gt 0; do
				download_src $1
				shift
			done

			exit 0
			;;

		*)
			echo "Invalid argument! Run 'birb --help' for help"
			exit 1
		;;
	esac
done
